jpsType: update
id: wordpress-multiregion-master-manager-addon
name: WordPress Multiregion Master Manager Add-on
description: WordPress Multiregion Master Manager Add-on

globals:
  wp_cluster_path: https://raw.githubusercontent.com/sych74/wordpress-cluster/v3.0.0
  regionsCount: ${settings.regionsCount:1}
  envName: ${settings.envName}

onAfterBindSSL: shareCertificates

onBeforeDelete:
  slavesDelete:
    password: ${event.params.password}
    
onAfterInstallAddon [nodeGroup:bl, id:cdn]:
  - install: ${globals.wp_cluster_path}/scripts/setupCDN.jps
 
onAfterInstallAddon [nodeGroup:cp, id:letsencrypt-ssl-addon]: 
  - setupLEdomain

onInstall:
  - setupLEwebroot

actions:
  setupLEwebroot:
    - cmd[cp,bl]: |-
        [ ! -d /var/lib/jelastic/keys/letsencrypt ] && mkdir -p /var/lib/jelastic/keys/letsencrypt;
        echo "webroot=true" > /var/lib/jelastic/keys/letsencrypt/settings-custom;
        echo "webrootPath=/var/www/webroot/ROOT" >> /var/lib/jelastic/keys/letsencrypt/settings-custom;
      user: root

  setupLEdomain:
    - cmd[${nodes.cp.master.id}]: source /opt/letsencrypt/settings && echo $domain
    - install: ${globals.wp_cluster_path}/scripts/setupDomain.jps
      settings:
        domain: https://${response.out}
  
  shareCertificates:
    - api: env.file.Read
      path:  /var/lib/jelastic/SSL/customssl.conf
      nodeId: ${nodes.bl.master.id} 
    - customSSLconf: ${response.body}
      script: |
        var regionsCount = parseInt('${globals.regionsCount}', 10),
            actions = [];
        for (var cluster = 2, n = regionsCount + 1; cluster < n; cluster ++) {
          actions.push({
            jps: "https://raw.githubusercontent.com/sych74/wordpress-multiregions/master/scripts/shareSSL.jps?_r=${fn.random}",
            envName: "${globals.envName}-" + cluster,
            settings: {
              customSSLconf: customSSLconf
            }  
          });
        }
        return { result: 0, onAfterReturn: { install: actions } };

  slavesDelete:
      script: |
        var regionsCount = parseInt('${globals.regionsCount}', 10),
            api = [];
        for (var cluster = 2, n = regionsCount + 1; cluster < n; cluster ++) {
          api.push({
            method: "env.control.DeleteEnv",
            envName: "${globals.envName}-" + cluster,
            password: "${this.password}"
          });
        }
        return { result: 0, onAfterReturn: { api: api } };
        
