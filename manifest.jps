type: install
jpsVersion: '1.7.2'
name: WordPress Cluster Multiregions
id: wordpress-cluster-multiregions
categories:
  - apps/clusters
  - apps/content-management
description: 
  text: WordPress Cluster package provides integrated autoscaling and high availability for development and production environments.
    The platform automatically deploys and configures chosen tolopology and required addons at specified regions.
  short: WordPress Cluster Pack
logo: /images/wp-cluster-kit.png
baseUrl: https://raw.githubusercontent.com/sych74/wordpress-multiregions/master

settings:
  fields:
    - caption: Regions
      type: regionlist
      name: regions
      disableInactive: true
      selectFirstAvailable: true
      multiSelect: true
      min: 1
      max: 3
      filter:
        isActive: true

    - caption: Environment
      type: envname
      name: envName
      dependsOn: region
      randomName: true
      showFullDomain: false
      required: true

    - caption: Scaling Strategy
      type: list
      name: loadGrowth
      default: slow
      required: true
      width: 225
      tooltip: | 
        Configure auto-scaling triggers, i.e. how fast the system responds to load spikes by adding or removing nodes.
        <p>Read more about <a href="https://docs.jelastic.com/automatic-horizontal-scaling">Automatic Horizontal Scaling</a></p>
      values:        
          - value: slow
            caption: Low Load
            tooltip: <h2>Low load scaling strategy</h2>add 1 new node when CPU > 70% <p>remove when CPU < 20%</p>
          - value: medium
            caption: Medium Load
            tooltip: <h3>Medium load scaling strategy</h3>add 1 new node when CPU > 50% <p>remove when CPU < 20%</p>
          - value: fast
            caption: High Load
            tooltip: <h3>High load scaling strategy</h3>add 2 new nodes when CPU > 30% <p>remove when CPU < 10%</p>

    - caption: Advanced Features
      type: displayfield
      name: displayfield
      markup:
 
    - caption: WordPress Brute Force Attack Protection
      type: checkbox
      name: wp_protect
      value: true
      disabled: false
      tooltip: "Secure WordPress Admin Panel with <a href='https://www.litespeedtech.com/support/wiki/doku.php/litespeed_wiki:config:wordpress-protection'>LiteSpeed Brute Force Protection</a> that limits failed login attempts. Default action is <b>Throttle</b> and number of allowed attempts is <b>100</b>"

    - caption: Web Application Firewall
      type: checkbox
      name: waf
      value: true
      disabled: false
      tooltip: "Protect web sites with <a href='https://www.litespeedtech.com/support/wiki/doku.php/litespeed_wiki:waf'>LiteSpeed built-in WAF</a> based on Free ModSecurity Rules from Comodo"
             
    - caption: Install Let's Encrypt SSL with Auto-Renewal
      type: checkbox
      name: le-addon
      value: false
      disabled: true

    - caption: Install Lightning-Fast Premium CDN with 130+ PoPs
      type: checkbox
      name: cdn-addon
      value: true
      disabled: false

    - caption: Install WordPress Multisite Network
      type: checkbox
      name: mu-addon
      value: false
      disabled: false
      
globals:
  db_user: jelastic-${fn.random}
  db_pass: ${fn.password(10)}
  db_host: sqldb
  protocol: http
  wp_admin_pass: ${fn.password(10)}
  ls_admin_pass: ${fn.password(10)}
  success: success
  email: default

onInstall:
  - setGlobals
  - createEnvs
  - setupGaleraCluster
  - startGaleraCluster
  
actions:

  setGlobals:
    - script: |
        return {
          result:0,
          regions:'${settings.regions}'.split(','),
          envGroups:eval('(' + MANIFEST + ')').envGroups
        }
    - setGlobals:
        region-1: ${response.regions[0]}
        region-2: ${response.regions[1]:}
        region-3: ${response.regions[2]:}
        envGroups: ${response.envGroups}
        displayName-1: WP Cluster Master
        displayName-2: WP Cluster Slave 1
        displayName-3: WP Cluster Slave 2
        galera-1: true
        galera-2: false
        galera-3: false
        initial_galera_master-1: true
        initial_galera_master-2: false
        initial_galera_master-3: false
        initial_galera_slave-1: false
        initial_galera_slave-2: true
        initial_galera_slave-3: true

  createEnvs:
    - script: |
        var regions = '${settings.regions}'.split(','),
            actions = [];
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          actions.push({
            jps: "https://raw.githubusercontent.com/sych74/wordpress-cluster/v3.0.0/manifest.jps?_r=${fn.random}",
            envName: "${settings.envName}-" + cluster,
            loggerName: "${settings.envName}-" + cluster,
            envGroups: "${globals.envGroups}",
            displayName: "${globals.displayName-" + cluster + "}",
            region: "${globals.region-" + cluster + "}",
            settings: {
              waf: "${settings.waf}",
              wp_protect: "${settings.wp_protect}",
              is_install_wp: "false",
              is_db_cluster: "false",
              is_storage_cluster: "true",
              galera: "${globals.galera-" + cluster + "}",
              glusterfs: "true",
              db_user: "${globals.db_user}",
              db_pass: "${globals.db_pass}"
            }  
          });
        }
        return { result: 0, onAfterReturn: { install: actions } };
        
  setupGaleraCluster:
    - script: |
        var regions = '${settings.regions}'.split(','),
            galera_nodes_address = "",
            actions = [];
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          var resp = jelastic.env.control.GetEnvInfo('${settings.envName}-' + cluster, session);
          if (resp.result != 0) return resp;
          for (var i = 0, k = resp.nodes; i < k.length; i++)
            k[i].nodeGroup == 'sqldb' ? galera_nodes_address += k[i].address + "," : 0;    
        }
        galera_nodes_address = galera_nodes_address.slice(0, -1);
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          actions.push({
            jps: "https://raw.githubusercontent.com/sych74/wordpress-multiregions/master/scripts/geo_galera.jps?_r=${fn.random}",
            envName: "${settings.envName}-" + cluster,
            settings: {
              path: "https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v2.0.0",
              db_user: "${globals.db_user}",
              db_pass: "${globals.db_pass}",
              setup_galera_cluster: "true",
              initial_galera_master: "false",
              initial_galera_slave: "false",
              galera_nodes_array: galera_nodes_address
            }  
          });
        }
        return { result: 0, onAfterReturn: { install: actions } };

  startGaleraCluster:
    - script: |
        var regions = '${settings.regions}'.split(','),
            actions = [];
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          actions.push({
            jps: "https://raw.githubusercontent.com/sych74/wordpress-multiregions/master/scripts/geo_galera.jps?_r=${fn.random}",
            envName: "${settings.envName}-" + cluster,
            settings: {
              path: "https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v2.0.0",
              db_user: "${globals.db_user}",
              db_pass: "${globals.db_pass}",
              setup_galera_cluster: "false",
              initial_galera_master: "${globals.initial_galera_master-" + cluster + "}",
              initial_galera_slave: "${globals.initial_galera_slave-" + cluster + "}"
            }  
          });
        }
        return { result: 0, onAfterReturn: { install: actions } };
  
  mountStorage:
    - script: |
        var regions = '${settings.regions}'.split(','),
            api = [];
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          api.push({
            method: jelastic.environment.file.AddMountPointByGroup,
            envName: "${settings.envName}-" + cluster,
            params: {
              nodeGroup: "cp",
              sourceNodeId: "${nodes.storage.master.id}",
              sourcePath: "/data",
              path: "/var/www/webroot/ROOT",
              sourceAddressType: "NODE_GROUP",
              protocol: "NFS4"
            }  
          });
        }
        return { result: 0, onAfterReturn: { api: api } };
   
